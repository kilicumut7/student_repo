Here's a comprehensive outline and example implementation approach for **Problem 3: Trajectories of a Freely Released Payload Near Earth** with explanations, numerical simulation, and visualization in Python.

---

# Problem 3: Trajectories of a Freely Released Payload Near Earth

---

## Motivation

Payloads released from rockets near Earth can follow different trajectories depending on initial velocity and position. These can be:

* **Elliptical orbits:** payload remains bound around Earth.
* **Parabolic trajectories:** borderline case for escape velocity.
* **Hyperbolic trajectories:** payload escapes Earth's gravity.

Understanding these trajectories is crucial for mission planning, satellite deployment, and reentry control.

---

## 1. Theoretical Background

### Gravitational force

Newton's law of universal gravitation:

$$
\mathbf{F} = -\frac{GMm}{r^3} \mathbf{r}
$$

where

* $G$ is gravitational constant,
* $M$ is Earth's mass,
* $m$ is payload mass,
* $\mathbf{r}$ is position vector of payload relative to Earthâ€™s center,
* $r = |\mathbf{r}|$.

### Equations of motion

Payload acceleration:

$$
\mathbf{a} = \frac{\mathbf{F}}{m} = -\frac{GM}{r^3} \mathbf{r}
$$

This second order ODE can be split into two first order ODEs:

$$
\frac{d\mathbf{r}}{dt} = \mathbf{v}, \quad \frac{d\mathbf{v}}{dt} = -\frac{GM}{r^3} \mathbf{r}
$$

---

## 2. Classification of Trajectories

* **Elliptical orbit:** total energy $E < 0$
* **Parabolic trajectory:** total energy $E = 0$ (escape velocity)
* **Hyperbolic trajectory:** total energy $E > 0$

Total specific energy (energy per unit mass):

$$
E = \frac{v^2}{2} - \frac{GM}{r}
$$

---

## 3. Numerical Simulation

Use numerical ODE solvers (e.g., Runge-Kutta 4) to integrate motion equations.

---

## 4. Python Implementation (Example)

```python
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Constants
G = 6.67430e-11          # gravitational constant (m^3 kg^-1 s^-2)
M_earth = 5.972e24       # Earth's mass (kg)
R_earth = 6.371e6        # Earth's radius (m)

def equations(t, y):
    # y = [x, y, vx, vy]
    rx, ry, vx, vy = y
    r = np.sqrt(rx**2 + ry**2)
    ax = -G * M_earth * rx / r**3
    ay = -G * M_earth * ry / r**3
    return [vx, vy, ax, ay]

def simulate_trajectory(r0, v0, t_max=10000, dt=10):
    y0 = [r0[0], r0[1], v0[0], v0[1]]
    t_span = (0, t_max)
    t_eval = np.arange(0, t_max, dt)
    
    sol = solve_ivp(equations, t_span, y0, t_eval=t_eval, rtol=1e-8, atol=1e-8)
    return sol.t, sol.y

# Initial conditions

# Example 1: Elliptical orbit
altitude = 400e3                      # 400 km above Earth surface
r0 = np.array([R_earth + altitude, 0])    # initial position vector (m)
v_circular = np.sqrt(G * M_earth / np.linalg.norm(r0))  # circular orbit speed
v0 = np.array([0, 0.9 * v_circular])   # velocity less than circular speed for elliptical orbit

# Example 2: Parabolic trajectory (escape velocity)
# v0 = np.array([0, v_circular * np.sqrt(2)])

# Example 3: Hyperbolic trajectory (greater than escape velocity)
# v0 = np.array([0, 1.1 * v_circular * np.sqrt(2)])

t, y = simulate_trajectory(r0, v0)

# Plotting trajectory
plt.figure(figsize=(8,8))
plt.plot(0,0,'yo',label='Earth Center')
plt.plot(y[0], y[1], label='Payload Trajectory')
earth_circle = plt.Circle((0, 0), R_earth, color='b', alpha=0.3, label='Earth')
plt.gca().add_artist(earth_circle)
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.axis('equal')
plt.legend()
plt.title('Payload Trajectory Near Earth')
plt.show()
```

---

## 5. Discussion

* Vary initial velocity magnitude and direction to observe elliptical, parabolic, and hyperbolic trajectories.
* Compare total energy $E$ for different initial conditions to classify trajectory.
* Real-world applications:

  * Elliptical orbits: satellite insertion.
  * Parabolic/hyperbolic: escape or reentry trajectories.
* Consider air drag or non-spherical Earth for more realistic models (extensions).

---

## 6. Deliverables

* **Markdown document:**

  * Explain gravitational equations and trajectory classification.
  * Present numerical approach and code.
  * Discuss physical interpretation and mission relevance.

* **Python notebook:**

  * Code for simulation with adjustable initial conditions.
  * Plots of trajectories illustrating various orbital scenarios.

---

If you want, I can help prepare the full Markdown with detailed explanations, or extend the simulation to include 3D motion or atmospheric drag. Would you like me to do that?
