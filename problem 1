Sure! Here's a **complete solution** to Problem 1 in English, organized as a Markdown document including theory, analysis, Python implementation, and discussion.

---

# Problem 1: Investigating the Range as a Function of the Angle of Projection

## Motivation

Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful.

What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.

---

## 1. Theoretical Foundation

### Deriving the Governing Equations

Consider a projectile launched from the ground with initial speed $v_0$ at an angle $\theta$ with respect to the horizontal. Neglecting air resistance, the only force acting on the projectile is gravity ($g$) directed downward.

The motion can be decomposed into horizontal (x) and vertical (y) components:

$$
x(t) = v_0 \cos\theta \cdot t
$$

$$
y(t) = v_0 \sin\theta \cdot t - \frac{1}{2}gt^2
$$

The time of flight $T$ is the time when the projectile returns to ground level $y=0$:

$$
0 = v_0 \sin\theta \cdot T - \frac{1}{2}g T^2 \implies T = \frac{2 v_0 \sin\theta}{g}
$$

The horizontal range $R$ is the horizontal distance traveled during this time:

$$
R = x(T) = v_0 \cos\theta \cdot T = \frac{v_0^2 \sin 2\theta}{g}
$$

### Family of Solutions

* Changing the initial velocity $v_0$ scales the range quadratically.
* The launch angle $\theta$ affects range sinusoidally, with maximum range at $\theta=45^\circ$.
* Gravity $g$ inversely affects the range.
* Starting from a different launch height complicates the formula but follows the same principles.

---

## 2. Analysis of the Range

* The range function $R(\theta) = \frac{v_0^2}{g} \sin 2\theta$ is periodic and symmetric about 45Â°.
* Increasing $v_0$ increases the maximum range as $v_0^2$.
* Increasing $g$ decreases the range.
* Optimal angle is $45^\circ$ assuming launch and landing heights are equal and no air resistance.

---

## 3. Practical Applications

* **Uneven Terrain:** If launch and landing heights differ, the time of flight and range formulas modify accordingly.
* **Air Resistance:** Introduces drag force, requiring numerical simulations as no closed-form solution exists.
* **Sports:** Ballistics of balls in soccer, basketball, golf.
* **Engineering:** Rocket launches, artillery trajectories.

---

## 4. Implementation

Below is a Python script using `numpy` and `matplotlib` to simulate and plot range vs. angle for different initial velocities.

```python
import numpy as np
import matplotlib.pyplot as plt

def projectile_range(v0, g, theta_deg):
    theta_rad = np.radians(theta_deg)
    return (v0**2 * np.sin(2 * theta_rad)) / g

# Parameters
g = 9.81  # m/s^2 gravity
angles = np.linspace(0, 90, 500)  # launch angles from 0 to 90 degrees
velocities = [10, 20, 30]  # different initial velocities in m/s

plt.figure(figsize=(10, 6))

for v0 in velocities:
    ranges = projectile_range(v0, g, angles)
    plt.plot(angles, ranges, label=f'v0 = {v0} m/s')

plt.title('Projectile Range vs Launch Angle')
plt.xlabel('Launch Angle (degrees)')
plt.ylabel('Range (meters)')
plt.legend()
plt.grid(True)
plt.show()
```

---

## Deliverables

* **Markdown document:** This document with explanations and embedded Python code.
* **Detailed theoretical description:** Provided above.
* **Graphs:** Range vs. angle curves for different initial velocities.
* **Discussion:** Covered real-world extensions like varying terrain and drag effects.

---

## Discussion on Limitations and Extensions

* The idealized model assumes no air resistance, no wind, and flat terrain.
* Air resistance can be modeled with drag forces proportional to velocity, requiring numerical integration.
* Launch height different from landing height changes the quadratic time of flight.
* Wind introduces lateral forces complicating the 2D motion.
* For realistic applications, these effects should be included with numerical solvers.

---

If you want, I can prepare this as a Markdown file ready for GitHub upload, or help you implement and run the Python code!

---

Would you like me to proceed with the next problem or assist in pushing this solution to your GitHub repo?
