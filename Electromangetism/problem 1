Awesome! The Lorentz force problem is a classic and super insightful for visualizing charged particle motion under electromagnetic fields.

I'll give you a **structured approach** with explanations, then a **Python simulation code** implementing the key scenarios:

---

# Problem 1: Simulating the Effects of the Lorentz Force

---

## 1. Theoretical Background

The Lorentz force on a particle with charge $q$ moving with velocity $\mathbf{v}$ in electric $\mathbf{E}$ and magnetic $\mathbf{B}$ fields is:

$$
\mathbf{F} = q(\mathbf{E} + \mathbf{v} \times \mathbf{B})
$$

Using Newton's second law:

$$
m \frac{d\mathbf{v}}{dt} = q(\mathbf{E} + \mathbf{v} \times \mathbf{B})
$$

$$
\frac{d\mathbf{r}}{dt} = \mathbf{v}
$$

---

## 2. Physical Scenarios

* **Uniform Magnetic Field Only**: Particle moves in a circle (cyclotron motion) perpendicular to $\mathbf{B}$.

* **Uniform Electric and Magnetic Fields (Parallel)**: Particle accelerates in the direction of $\mathbf{E}$, with magnetic field causing gyration.

* **Crossed Electric and Magnetic Fields ($\mathbf{E} \perp \mathbf{B}$)**: Particle drifts with velocity $\mathbf{v}_d = \frac{\mathbf{E} \times \mathbf{B}}{B^2}$.

---

## 3. Numerical Approach

* Use **Runge-Kutta 4th order (RK4)** or Euler method to integrate:

$$
\frac{d\mathbf{r}}{dt} = \mathbf{v}, \quad
\frac{d\mathbf{v}}{dt} = \frac{q}{m} (\mathbf{E} + \mathbf{v} \times \mathbf{B})
$$

---

## 4. Python Implementation

```python
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def lorentz_rhs(t, r, v, q, m, E, B):
    # r, v: vectors (3,)
    dvdt = (q / m) * (E + np.cross(v, B))
    drdt = v
    return drdt, dvdt

def rk4_step(t, r, v, dt, q, m, E, B):
    dr1, dv1 = lorentz_rhs(t, r, v, q, m, E, B)
    dr2, dv2 = lorentz_rhs(t + dt/2, r + dr1*dt/2, v + dv1*dt/2, q, m, E, B)
    dr3, dv3 = lorentz_rhs(t + dt/2, r + dr2*dt/2, v + dv2*dt/2, q, m, E, B)
    dr4, dv4 = lorentz_rhs(t + dt, r + dr3*dt, v + dv3*dt, q, m, E, B)

    r_next = r + (dt/6) * (dr1 + 2*dr2 + 2*dr3 + dr4)
    v_next = v + (dt/6) * (dv1 + 2*dv2 + 2*dv3 + dv4)
    return r_next, v_next

def simulate_trajectory(q, m, r0, v0, E, B, T, dt):
    N = int(T / dt)
    rs = np.zeros((N, 3))
    vs = np.zeros((N, 3))

    r, v = r0, v0
    t = 0.0
    for i in range(N):
        rs[i] = r
        vs[i] = v
        r, v = rk4_step(t, r, v, dt, q, m, E, B)
        t += dt
    return rs, vs

def plot_trajectory(rs, title="Particle Trajectory"):
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.plot(rs[:,0], rs[:,1], rs[:,2])
    ax.set_xlabel('x')
    ax.set_ylabel('y')
    ax.set_zlabel('z')
    ax.set_title(title)
    plt.show()

# Example usage:

# Particle parameters (electron)
q = -1.6e-19  # charge [C]
m = 9.11e-31  # mass [kg]

# Initial position and velocity
r0 = np.array([0.0, 0.0, 0.0])  # start at origin
v0 = np.array([1e6, 0.0, 0.0])  # initial velocity along x

# 1. Uniform magnetic field only (along z)
E = np.array([0.0, 0.0, 0.0])
B = np.array([0.0, 0.0, 1.0])  # Tesla

T = 1e-7  # total time [s]
dt = 1e-10  # timestep [s]

rs, vs = simulate_trajectory(q, m, r0, v0, E, B, T, dt)
plot_trajectory(rs, "Uniform Magnetic Field: Circular Motion")

# 2. Uniform electric and magnetic fields (parallel)
E = np.array([0.0, 0.0, 1e5])  # V/m along z
B = np.array([0.0, 0.0, 1.0])  # Tesla along z

rs, vs = simulate_trajectory(q, m, r0, v0, E, B, T, dt)
plot_trajectory(rs, "Parallel E and B Fields")

# 3. Crossed electric and magnetic fields (E along x, B along z)
E = np.array([1e5, 0.0, 0.0])  # V/m along x
B = np.array([0.0, 0.0, 1.0])  # Tesla along z

rs, vs = simulate_trajectory(q, m, r0, v0, E, B, T, dt)
plot_trajectory(rs, "Crossed E and B Fields: Drift Motion")
```

---

## 5. Explanation of Results

* **Uniform Magnetic Field**: Particle moves in a circle in the xy-plane, radius given by the **Larmor radius**:

$$
r_L = \frac{m v_{\perp}}{|q| B}
$$

* **Parallel E and B Fields**: Particle spirals, accelerating along the field direction.

* **Crossed Fields**: Particle drifts perpendicular to both $\mathbf{E}$ and $\mathbf{B}$ with velocity:

$$
\mathbf{v}_d = \frac{\mathbf{E} \times \mathbf{B}}{B^2}
$$

---

## 6. Practical Applications

* **Particle accelerators** (cyclotrons, synchrotrons) use magnetic fields to bend charged particle trajectories.

* **Mass spectrometers** separate ions by charge-to-mass ratio using crossed E and B fields.

* **Magnetic confinement fusion devices** use magnetic fields to trap plasma particles.

---

## 7. Extensions

* Non-uniform fields (magnetic mirrors, gradient fields).

* Include radiation reaction forces for very high-energy particles.

* Model multiple interacting particles in plasma.

---

If you want, I can help you prepare a full notebook or Markdown report with this simulation code, explanations, and visualizations. Would that be helpful?
